# !/usr/bin/env python3
import os
from Bio import SeqIO


#circular plot
import matplotlib.pyplot as plt

fig, ax = plt.subplots(1, 1, subplot_kw=dict(polar=True))
plt.show()

# os.chdir('/Dcko/ownCloud/SAGs/phylogenomics/EU1718/bordor/')
# alignments = [x for x in os.listdir() if x.endswith('.fas')]

# with open('EU1718_gordon.fa', 'w') as out:
# 	for aln in alignments:
# 		print(aln)
# 		name = aln.split('_')[0]
# 		for seq in SeqIO.parse(aln, 'fasta'):
# 			out.write('>{}_{}\n{}\n'.format(seq.name, name, seq.seq))



# import argparse

# parser = argparse.ArgumentParser(description='How to use argparse')
# parser.add_argument('-i', '--input', help='FASTA eclist')

# args = parser.parse_args()

# eclist = args.input
# print(eclist)



# seq = 'MAGDALSKNVIUDCPAVO'
# SP = 3

# print(seq[3:])


# import sys
# sys.platform



# from Bio import SeqIO
# from Bio.Seq import Seq
# from Bio.SeqRecord import SeqRecord
# from Bio.Alphabet import IUPAC
# from Bio.SeqFeature import SeqFeature, FeatureLocation
 
# # Create a sequence
# sequence_string = 'ggggaaaattttaaaaccccaaaa'
# sequence_object = Seq(sequence_string, IUPAC.unambiguous_dna)
 
# # Create a record
# record = SeqRecord(sequence_object,
#                    id='123456789', # random accession number
#                    name='Example',
#                    description='An example GenBank file generated by BioPython')
 
# # Add annotation
# feature = SeqFeature(FeatureLocation(start=3, end=12), type='misc_feature')
# record.features.append(feature)
 
# # Save as GenBank file
# output_file = open('/home/kika/paratrypanosoma/20180208_new/example.gb', 'w')
# SeqIO.write(record, output_file, 'genbank')




# class Sequence:
# 	def __init__(self, name, seq):
# 		self.name = name
# 		self.seq = seq
# 		self.codons = []
	
# 	def count_codons(self):
# 		for i in range(0, len(self.seq)-2, 3):
# 			self.codons.append(self.seq[i:i+3])
# 		return self.codons

# seq_dict = {'bla1':'ATCGATGCTAGCTAGCATGCTA', 'bla2':'GGGATCGATCATAGTCAGTCGATCGA'}

# new = {}
# for key, value in seq_dict.items():
# 	new[key] = Sequence(key, value)

# for name, item in new.items():
# 	print(name)
# 	print(item.seq)
# 	print(item.count_codons())




# x = 'AHJKIDUATSGDUIJVOFS'

# if 'M' not in x:
# # x.find('M') < 0:
# 	print('no')
# else:
# 	print('yes')


# x = 'abcdefgh'

# print(int(len(x)/2))
# print(x[:int(len(x)/2)])

# for i in range(len(x)-1, -1, -1):
# 	print(x[i:])
# 	i += 1

# for i in x[::-1]:
# 	print(i)


# import re

# key_ins = 'NODE_146_length_46873_cov_73.8744:10500-16000_1'
# key_root = re.sub(r'(NODE_\d+_length_\d+_cov_\d+.\d+).*', r'\g<1>', key_ins)
# print(key_root)


# sequences = ['AAATTTCCCGGGAAATTT', 'TTTGGGAAATTTCCC']

# for sequence in sequences:
# 	if sequence.count(sequence[0:5]) > 1:
# 		print('circular: ' + sequence)
# 	else:
# 		print('not circular: ' + sequence)


# import re

# sequences = ['AAATTTCCCGGGAAANCGNTTTT', 'TTTGGGAAATTTCCC']

# for sequence in sequences:
# 	hits = re.findall(r'(([A-Z])\2\2+)', sequence)
# 	print([hit[0] for hit in hits])


# sequence = 'AAATTTCCCGGGAAATTT'
# print(sequence.find('TTT'))

# sequence = 'AAATTTCCCGGGAAATTT'
# for i in range(len(sequence)):
# 	print(sequence[0:i+1])
# 	if sequence.count(sequence[0:i+1]) > 1:
# 		print(len(sequence[0:i+1]))
# 		# if sequence[0:i+1] == sequence[-len(sequence[0:i+1]):]
# 		print('repeat: ' + sequence[0:i+1])
# 		print('repeat start: ' + str(sequence.find(sequence[0:i+1])))
# 	i += 1
